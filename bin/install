#!/usr/bin/env bash

set -eo pipefail

fail() {
  echo -e "\e[31mFail:\e[m $*"
  exit 1
}

install_crystal() {
  local install_type=$1
  local version=$2
  local install_path=$3

  while IFS='.' read -ra SEMVER; do
    major=${SEMVER[0]}
    minor=${SEMVER[1]}
  done <<<"$version"

  if [ "$install_type" != "version" ]; then
    fail "asdf-crystal supports release installs only"
  fi

  local platform

  case "$OSTYPE" in
    darwin*) platform="darwin" ;;
    linux*) platform="linux" ;;
    *) fail "Unsupported platform" ;;
  esac

  local architecture
  architecture="$(uname -m)"

  if [ "$platform" = "darwin" ] && [ "$major" -ge 1 ] && [ "$minor" -ge 2 ]; then
    architecture="universal"
  fi

  local download_url="https://github.com/crystal-lang/crystal/releases/download/${version}/crystal-${version}-1-${platform}-${architecture}.tar.gz"
  local tmp_download_dir
  tmp_download_dir=$(mktemp -d -t crystal_tmp_XXXXXX)
  local source_path="${tmp_download_dir}/crystal.tar.gz"

  (
    echo "* Downloading and installing Crystal..."
    curl --silent --fail --location --create-dirs --output "$source_path" "$download_url" || fail "Could not download Crystal $version for architecture $architecture"
    tar zxf "$source_path" -C "$install_path" --strip-components=1
    rm -rf "$tmp_download_dir"

    if [ "$platform" == "darwin" ]; then
      local libyaml_path
      libyaml_path=$(otool -L "$install_path/embedded/bin/shards" | grep libyaml | cut -d " " -f1 | tr -d "\t")

      if [ "$libyaml_path" == "/opt/crystal/embedded/lib/libyaml-0.2.dylib" ]; then
        install_name_tool -change "$libyaml_path" "$install_path/embedded/lib/libyaml-0.2.dylib" "$install_path/embedded/bin/shards"
      fi
    fi

    echo "The installation was successful!"
  ) || (
    rm -rf "$install_path"
    fail "An error occurred"
  )
}

install_crystal "$ASDF_INSTALL_TYPE" "$ASDF_INSTALL_VERSION" "$ASDF_INSTALL_PATH"
